/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== bld.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x400;
System.SupportProxy = SysMin;

Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Defaults.common$.diags_INFO = Diags.ALWAYS_ON;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');

var GPIO = xdc.useModule('ti.drivers.GPIO');
var UART = xdc.useModule('ti.drivers.UART');
UART.libType = UART.LibType_NonInstrumented;

/* Turn on USER1 logs in Main module */
Main.common$.diags_USER1 = Diags.RUNTIME_ON;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

BIOS.libType = BIOS.LibType_Debug;

var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
M3Hwi.enableException = true;
M3Hwi.nvicCCR.UNALIGN_TRP = 1;
M3Hwi.nvicCCR.DIV_0_TRP = 1;

Clock.tickPeriod = 1000; // us

/*
params = new Task.Params;
params.priority = 2;
Task.create('&triggerSample', params);

var params = new Task.Params;
params.priority = 1;
Task.create('&printData', params);
*/

var INT_TIMER1A = 37; // from tivaware-2.0/inc/hw_ints.h (or datasheet p102)
var hwiParams = new Hwi.Params;
hwiParams.enableInt = true;
Hwi.create(INT_TIMER1A, '&onProfileTick', hwiParams);

var INT_UART0 = 21; // from tivaware-2.0/inc/hw_ints.h (or datasheet p102)
var hwiParams = new Hwi.Params;
hwiParams.enableInt = true;
Hwi.create(INT_UART0, '&onExportComplete', hwiParams);

var INT_UDMAERR = 61; // from tivaware-2.0/inc/hw_ints.h (or datasheet p102)
var hwiParams = new Hwi.Params;
hwiParams.enableInt = true;
Hwi.create(INT_UDMAERR, '&onDMAError', hwiParams);

var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var swiParams = new Swi.Params;
swiParams.priority = 1;
Program.global.exportBuffersSwi = Swi.create('&processBuffers', swiParams);

var tempClockObj = Clock.create('&sampleTemp', 1);
tempClockObj.period = msecToClockTicks(1000);
tempClockObj.startFlag = true;
Program.global.tempClockObj = tempClockObj;

function msecToClockTicks(ms)
{
    var usPerTick = Clock.tickPeriod;
    return (ms * 1000) / usPerTick;
}
