/* ================ General configuration ================ */
var Program = xdc.useModule('xdc.cfg.Program');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var System = xdc.useModule('xdc.runtime.System');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x400;
SysMin.outputFxn = '&outputToConsole';
System.SupportProxy = SysMin;
System.abortFxn = '&onAbort';
System.exitFxn = '&onExit';

Defaults.common$.diags_ASSERT = Diags.ALWAYS_ON;
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Defaults.common$.diags_INFO = Diags.ALWAYS_ON;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');

// TODO: needed?
var UART = xdc.useModule('ti.drivers.UART');
UART.libType = UART.LibType_NonInstrumented;

// M4F specific interrupt ctler config (M4 inherits M3's interrupt ctler)
var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
M3Hwi.enableException = true;
M3Hwi.nvicCCR.UNALIGN_TRP = 1;
M3Hwi.nvicCCR.DIV_0_TRP = 1;
M3Hwi.excHookFunc = '&onException';

Clock.tickPeriod = 500; // us

var PlatformInfo = xdc.useModule('PlatformInfo');

var hwiParams = new Hwi.Params;
hwiParams.enableInt = true;
Hwi.create(PlatformInfo['INT_UDMAERR'], '&onDMAError', hwiParams);

var Leds = xdc.useModule('Leds');
Program.global.g_faultLed = Leds.Led_RED;
Program.global.g_statusLed = Leds.Led_BLUE; // blink rate = acquiring or idle
Program.global.g_txLed = Leds.Led_GREEN; // data buffer transmitting over UART

// Blink rates for status LED
Program.global.g_blinkRateStopped = 2;
Program.global.g_blinkRateRunning = 1;

var Daq = xdc.useModule("Daq");

// Need access to tempreture sequencer index to trigger samples from software
tempAdc = 1;
tempSeq = 3;
Program.global.g_tempAdc = tempAdc;
Program.global.g_tempSeq = tempSeq;

Daq.daqConfig = {
    adcs: [
        { // ADC 0
            triggerTimer: { idx: 1, half: Daq.TimerHalf_A },
            samplesPerSec: 10,
            hwAvgFactor: 16,
            seqs: [
                { // seq 0
                    enabled: true,
                    priority: 0,
                    trigger: Daq.AdcTrigger_TIMER,
                    bufSize: 512,
                    samples: [
                        Daq.AdcInChan_A0,
                        Daq.AdcInChan_A1,
                        Daq.AdcInChan_A2,
                        Daq.AdcInChan_A3,
                    ],
                },
                {enabled: false}, // seq 1
                {enabled: false}, // seq 2
                {enabled: false}, // seq 3
            ],
        }, 
        { // ADC 1
            hwAvgFactor: 1,
            seqs: [
                {enabled: false}, // seq 0
                {enabled: false}, // seq 1
                {enabled: false}, // seq 2
                { // seq 3
                    enabled: true,
                    priority: 1,
                    trigger: Daq.AdcTrigger_PROCESSOR,
                    bufSize: 64,
                    samples: [
                        Daq.AdcInChan_TS,
                    ],
                },
            ],
        },
    ],
};

var Export = xdc.useModule("Export");
Export.uartPortIdx = 1;
Export.uartBaudRate = 2000000;
Export.txQueuedCallback = '&onExportTxQueued';
Export.txCompletedCallback = '&onExportTxCompleted';

var tempClockObj = Clock.create('&sampleTemp', 1);
tempClockObj.period = msecToClockTicks(1000);
tempClockObj.startFlag = false;
Program.global.tempClockObj = tempClockObj;

var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var swiParams = new Swi.Params;
swiParams.priority = 1;
Program.global.startStopSwi = Swi.create('&startStop', swiParams);

function msecToClockTicks(ms)
{
    var usPerTick = Clock.tickPeriod;
    return (ms * 1000) / usPerTick;
}
